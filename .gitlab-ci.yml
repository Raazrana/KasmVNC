image: docker
services:
  - docker:dind

variables:
  GITLAB_SHARED_DIND_DIR: /builds/$CI_PROJECT_PATH/shared
  GIT_FETCH_EXTRA_FLAGS: --tags

stages:
  - upload
  - build

.prepare_build: &prepare_build
  - ls -l
  - pwd
  - apk add bash
  - mkdir -p "$GITLAB_SHARED_DIND_DIR" && chmod 777 "$GITLAB_SHARED_DIND_DIR"
  - if echo "$CI_COMMIT_BRANCH" | grep -Eq '(release|testing)'; then export BUILD_ALL_DISTROS=1; fi

.prepare_artfacts: &prepare_artfacts
  - mkdir output
  - cp -r builder/build/* output/
  - rm output/*.tar.gz

build_ubuntu_bionic:
  stage: build
  before_script:
    - *prepare_build
  after_script:
    - *prepare_artfacts
  script:
    - bash builder/build-distro ubuntu bionic
  artifacts:
    paths:
      - output/

build_ubuntu_focal:
  stage: build
  before_script:
    - *prepare_build
  after_script:
    - *prepare_artfacts
  script:
    - if [ -n "$BUILD_ALL_DISTROS" ]; then
        bash builder/build-distro ubuntu focal;
      fi
  artifacts:
    paths:
      - output/

build_debian_buster:
  stage: build
  before_script:
    - *prepare_build
  after_script:
    - *prepare_artfacts
  script:
    - if [ -n "$BUILD_ALL_DISTROS" ]; then
        bash builder/build-distro debian buster;
      fi
  artifacts:
    paths:
      - output/

build_debian_bullseye:
  stage: build
  before_script:
    - *prepare_build
  after_script:
    - *prepare_artfacts
  script:
    - if [ -n "$BUILD_ALL_DISTROS" ]; then
        bash builder/build-distro debian bullseye;
      fi
  artifacts:
    paths:
      - output/

build_kali_rolling:
  stage: build
  before_script:
    - *prepare_build
  after_script:
    - *prepare_artfacts
  script:
    - if [ -n "$BUILD_ALL_DISTROS" ]; then
        bash builder/build-distro kali kali-rolling;
      fi
  artifacts:
    paths:
      - output/

build_centos7:
  stage: build
  before_script:
    - *prepare_build
  after_script:
    - *prepare_artfacts
  script:
    - bash builder/build-distro centos core
  artifacts:
    paths:
      - output/

upload:
  stage: upload
  image: ubuntu:focal
  before_script:
    - |
        function prepare_upload_filename() {
          local package="$1";

          .ci/detect_os_arch_package_format "$package" > /tmp/os_arch_package_format;
          source /tmp/os_arch_package_format;
          if [ -n "$RELEASE_BRANCH" ]; then
            export BUILD_FILE="kasmvncserver_${PACKAGE_OS}_${RELEASE_VERSION}_${OS_ARCH}.${PACKAGE_FORMAT}";
          else
            export BUILD_FILE="kasmvncserver_${PACKAGE_OS}_${RELEASE_VERSION}_${SANITIZED_BRANCH}_${CI_COMMIT_SHA:0:6}_${OS_ARCH}.${PACKAGE_FORMAT}";
          fi
        };

        function upload_to_s3() {
          # Transfer to S3
          python3 amazon-s3-bitbucket-pipelines-python/s3_upload.py "${S3_BUCKET}" ${BASE_DIR}/builder/build/${BUILD_FILE} "${S3_BUILD_DIRECTORY}/${BUILD_FILE}";
          # Use the Gitlab API to tell Gitlab where the artifact was stored
          export S3_URL="https://${S3_BUCKET}.s3.amazonaws.com/${S3_BUILD_DIRECTORY}/${BUILD_FILE}";
          export BUILD_STATUS="{\"key\":\"doc\", \"state\":\"SUCCESSFUL\", \"name\":\"${BUILD_FILE}\", \"url\":\"${S3_URL}\"}";
          curl --request POST --header "PRIVATE-TOKEN:${GITLAB_API_TOKEN}" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/statuses/${CI_COMMIT_SHA}?state=success&name=build-url&target_url=${S3_URL}";
        }
  script:
    - export DEBIAN_FRONTEND=noninteractive
    - apt-get update
    - apt-get install -y ruby2.7 git
    - apt-get install -y python3 python3-pip python3-boto3 curl pkg-config libxmlsec1-dev
    - git clone https://bitbucket.org/awslabs/amazon-s3-bitbucket-pipelines-python.git
    - if echo $CI_COMMIT_REF_NAME | grep -Pq '^release/([\d.]+)$'; then
        export RELEASE_BRANCH=1;
      fi
    - export RELEASE_VERSION=$(.ci/next_release_version "$CI_COMMIT_REF_NAME")
    - export SANITIZED_BRANCH="$(echo $CI_COMMIT_REF_NAME | sed 's/\//_/g')"
    - export S3_BUILD_DIRECTORY="kasmvnc/${CI_COMMIT_SHA}"
    - mkdir -p output/buster output/centos_core
    - touch output/buster/kasmvncserver_0.9.1~beta-1_amd64.deb;
    - touch output/centos_core/kasmvncserver-0.9.1~beta-1.el7.x86_64.rpm;
    - for package in `find output/ -type f -name 'kasmvncserver_*.deb' -or -name '*.rpm'`; do
        prepare_upload_filename "$package";
        echo $BUILD_FILE;
      done
    - exit 1
